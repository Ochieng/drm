// testcrypto.cpp
 
#define CRYPTOPP_DEFAULT_NO_DLL
#include <cryptopp/dll.h>
#include <cryptopp/default.h>
#include <ziparchive/ZipArchive.h>
#include <iostream>
#include <sys/stat.h>
 
#ifdef CRYPTOPP_WIN32_AVAILABLE
#include <windows.h>
#endif

using namespace CryptoPP;
using namespace std;

const int MAX_PHRASE_LENGTH=250;
struct stat results;


void EncryptFile(const char *in, const char *out, const char *passPhrase);
void DecryptFile(const char *in, const char *out, const char *passPhrase);


int main(int argc, char *argv[])
{

	try
	{
		char const *passPhrase = "N67C9PpD,uqZRG(MxeQWzCdmzqezJGo8tnMk[4s(FpHkdWtY.t";
		char const *zipFile = "drm.zip";
		char const *iFile = argv[1];
		char const *encFile = argv[2];
		char const *decFile = argv[3];
		
		//cout << "Passphrase: " << cin.getline(passPhrase, MAX_PHRASE_LENGTH) << endl;
		//cout << "Input file: " << cin.getline(iFile, MAX_PHRASE_LENGTH) << endl;
		//cout << "Output(encrypted) file: " << cin.getline(oFile, MAX_PHRASE_LENGTH) << endl;
		
		EncryptFile(iFile, encFile, passPhrase);
		DecryptFile(encFile, decFile, passPhrase);
		//EncryptFile(argv[1], argv[2], passPhrase);
		//DecryptFile(argv[2], argv[3], passPhrase);
		if (stat(encFile, &results) == 0){			 
			//cout << results.st_size << endl;
			CZipArchive zip;
			// create a new archive
			zip.Open(zipFile, CZipArchive::zipCreate);    
			// simple add with the default compression level
			zip.AddNewFile(encFile);
			zip.Close();

		}else{
			// An error occurred
			cout << "0" << endl;
			return -1;
		}

	}
	catch(CryptoPP::Exception &e)
	{
		cout << "\nCryptoPP::Exception caught: " << e.what() << endl;
		return -1;
	}
	catch(std::exception &e)
	{
		cout << "\nstd::exception caught: " << e.what() << endl;
		return -2;
	}
}


void EncryptFile(const char *in, const char *out, const char *passPhrase)
{
	FileSource f(in, true, new DefaultEncryptorWithMAC(passPhrase, new FileSink(out)));
}

void DecryptFile(const char *in, const char *out, const char *passPhrase)
{
	FileSource f(in, true, new DefaultDecryptorWithMAC(passPhrase, new FileSink(out)));
}


RandomPool & GlobalRNG()
{
	static RandomPool randomPool;
	return randomPool;
}

int (*AdhocTest)(int argc, char *argv[]) = NULL;

